#lang racket
(require "08repeat-list.rkt")

(define (repeat-lists l1 l2)
  (define (helper1 current-list)
    (if (null? current-list)
        (helper2 l2)
        (stream-cons (car current-list)
                     (helper1 (cdr current-list)))))
  (define (helper2 current-list)
    (if (null? current-list)
        (helper1 l1)
        (stream-cons (car current-list)
                     (helper2 (cdr current-list)))))
  (helper1 l1))

(define (repeat-lists2 l1 l2)
  (repeat-list (append l1 l2)))

(stream-ref (repeat-lists '(1 2 3) '(4 5 6)) 0)
(stream-ref (repeat-lists2 '(1 2 3) '(4 5 6)) 0)
(stream-ref (repeat-lists '(1 2 3) '(4 5 6)) 1)
(stream-ref (repeat-lists2 '(1 2 3) '(4 5 6)) 1)
(stream-ref (repeat-lists '(1 2 3) '(4 5 6)) 2)
(stream-ref (repeat-lists2 '(1 2 3) '(4 5 6)) 2)
(stream-ref (repeat-lists '(1 2 3) '(4 5 6)) 3)
(stream-ref (repeat-lists2 '(1 2 3) '(4 5 6)) 3)
(stream-ref (repeat-lists '(1 2 3) '(4 5 6)) 4)
(stream-ref (repeat-lists2 '(1 2 3) '(4 5 6)) 4)
(stream-ref (repeat-lists '(1 2 3) '(4 5 6)) 11)
(stream-ref (repeat-lists2 '(1 2 3) '(4 5 6)) 11)
(stream-ref (repeat-lists '(1 2 3) '(4 5 6)) 64)
(stream-ref (repeat-lists2 '(1 2 3) '(4 5 6)) 64)